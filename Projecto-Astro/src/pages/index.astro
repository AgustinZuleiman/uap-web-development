---
import Welcome from "../components/Welcome.astro";
import Layout from "../layouts/Layout.astro";
import { state } from "./state.ts";

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const newTask = formData.get("task")?.toString();
  const deleteTask = formData.get("delete")?.toString();
  const completeTask = formData.get("complete")?.toString();
  const clearAll = formData.get("clearAll")?.toString();

  if (newTask) {
    state.tasks.push({
      id: state.tasks.length + 1,
      name: newTask,
      completed: false,
    });
  }
  if (deleteTask) {
    const taskId = parseInt(deleteTask);
    state.tasks = state.tasks.filter((task) => task.id !== taskId);
  }
  if (completeTask) {
    const taskId = parseInt(completeTask);
    state.tasks = state.tasks.map((task) =>
      task.id === taskId ? { ...task, completed: !task.completed } : task
    );
  }
  if (clearAll) {
    state.tasks = state.tasks.filter((task) => !task.completed);
  }
}
---

<Layout>
  <html lang="es">
    <head>
      <title>Gestor de tareas</title>
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    </head>

    <body class="bg-white font-sans m-0 p-0">
      <h1 class="text-center text-black text-5xl my-5">Tareas a realizar</h1>

      <div class="flex justify-center gap-4 m-4 w-full">
        <button class="bg-pink-300 text-black py-4 px-10 border-none cursor-pointer w-1/4 text-xl hover:border-b-2 border-black">
          Personal
        </button>
        <button class="bg-pink-300 text-black py-4 px-10 border-none cursor-pointer w-1/4 text-xl hover:border-b-2 border-black">
          Profesional
        </button>
      </div>

      <main class="w-full flex flex-col items-center gap-6">
        <form method="post" id="form-agregar" class="flex justify-center gap-4 w-full max-w-lg">
          <input
            type="text"
            name="task"
            placeholder="Agregar tarea"
            class="w-3/4 p-2 text-lg border border-gray-300 rounded"
            required
          />
          <button
            type="submit"
            class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            Agregar
          </button>
        </form>

        <ul id="task-list" class="flex flex-col items-center gap-4 bg-orange-100 w-1/2 p-4 rounded">
          {
            state.tasks.map((task) => (
              <li class="flex items-center gap-4 w-full justify-between">
                <form method="post" class="inline">
                  <input type="hidden" name="complete" value={task.id} />
                  <input type="checkbox" checked={task.completed} class="cursor-pointer" />
                </form>
                <span class={task.completed ? "line-through text-gray-500" : ""}>
                  {task.name}
                </span>
                <form method="post" class="inline">
                  <input type="hidden" name="delete" value={task.id} />
                  <button
                    type="submit"
                    class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600"
                  >
                    Eliminar
                  </button>
                </form>
              </li>
            ))
          }
        </ul>

        <form method="post" id="form-clear-all" class="mt-4">
          <input type="hidden" name="clearAll" value="true" />
          <button
            type="submit"
            class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
          >
            Eliminar todas las completadas
          </button>
        </form>
      </main>

      <script type="module">
        document.addEventListener("DOMContentLoaded", () => {
          const formAgregar = document.getElementById("form-agregar");
          const formClearAll = document.getElementById("form-clear-all");
          const taskList = document.getElementById("task-list");
          const noTasksMessage = document.querySelector("p.text-gray-500");
          const clearAllButton = document.getElementById("form-clear-all");

          const updateUI = () => {
            if (state.tasks.length === 0) {
              noTasksMessage?.classList.remove("hidden");
            } else {
              noTasksMessage?.classList.add("hidden");
            }

            if (state.tasks.some((task) => task.completed)) {
              clearAllButton?.classList.remove("hidden");
            } else {
              clearAllButton?.classList.add("hidden");
            }
          };

          formAgregar?.addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData = new FormData(formAgregar);
            const res = await fetch("/api/task", {
              method: "POST",
              body: formData,
            });

            if (res.ok) {
              const { task } = await res.json();
              const li = document.createElement("li");
              li.className = "flex items-center gap-4 w-full justify-between";
              li.innerHTML = `
                <form method="post" class="inline">
                  <input type="hidden" name="complete" value="${task.id}" />
                  <input type="checkbox" class="cursor-pointer" />
                </form>
                <span>${task.name}</span>
                <form method="post" class="inline">
                  <input type="hidden" name="delete" value="${task.id}" />
                  <button type="submit" class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600">Eliminar</button>
                </form>
              `;
              taskList?.appendChild(li);
              formAgregar.reset();
              updateUI();
            }
          });

          taskList?.addEventListener("change", async (e) => {
            const checkbox = e.target;
            if (checkbox.type === "checkbox") {
              const form = checkbox.closest("form");
              const formData = new FormData(form);
              const res = await fetch("/api/task", {
                method: "POST",
                body: formData,
              });

              if (res.ok) {
                const li = form.closest("li");
                const span = li.querySelector("span");
                if (span) {
                  span.classList.toggle("line-through");
                  span.classList.toggle("text-gray-500");
                }
                updateUI();
              } else {
                checkbox.checked = !checkbox.checked;
              }
            }
          });

          taskList?.addEventListener("submit", async (e) => {
            e.preventDefault();
            const form = e.target;
            const formData = new FormData(form);
            const res = await fetch("/api/task", {
              method: "POST",
              body: formData,
            });

            if (res.ok) {
              const li = form.closest("li");
              li?.remove();
              updateUI();
            }
          });

          formClearAll?.addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData = new FormData(formClearAll);
            const res = await fetch("/api/task", {
              method: "POST",
              body: formData,
            });

            if (res.ok) {
              document.querySelectorAll("li").forEach((li) => {
                const checkbox = li.querySelector('input[type="checkbox"]');
                if (checkbox?.checked) {
                  li.remove();
                }
              });
              updateUI();
            }
          });

          updateUI();
        });
      </script>
    </body>
  </html>
</Layout>
